month <- i
# march separate b/c not full month ()
if (i==3) {
for (j in 23:31) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end march for
} # end march if
# if april, june, september, 30 days
else if ( (i==4) | (i==6) | (i==9) | (i==11) ) {
for (j in 1:30) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end 30 for
} # end 30 if
# if may, july, august, october, 31 days
else if ( (i==5) | (i==8) | (i==10) ) {
for (j in 1:31) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end 31 for
} # end 31 if
# november separate b/c not full month
else if (i==11){
for (j in 1:6) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end november for
} # end november if
else {
break # error?
} # end else
} # end for
when <- NULL  # initialize empty
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
date <- as_date(paste0(i,"-",j,"-2016"))
date
date <- paste0(i,"-",j,"-2016")
date <- paste0("2016-",i,"-",j,)
date <- paste0("2016-",i,"-",j)
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
when <- as_date()  # initialize empty
when <- as_date(NULL)  # initialize empty
when <- vector  # initialize empty
when <- vector()  # initialize empty
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
when <- vector()  # initialize empty vector to hold dates
# loop through months; inner loop through days
for (i in month(start): month(end)) {
month <- i
# march separate b/c not full month ()
if (i==3) {
for (j in 23:31) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end march for
} # end march if
# if april, june, september, 30 days
else if ( (i==4) | (i==6) | (i==9) | (i==11) ) {
for (j in 1:30) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end 30 for
} # end 30 if
# if may, july, august, october, 31 days
else if ( (i==5) | (i==8) | (i==10) ) {
for (j in 1:31) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end 31 for
} # end 31 if
# november separate b/c not full month
else if (i==11){
for (j in 1:6) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end november for
} # end november if
else {
break # error?
} # end else
} # end for
# march separate b/c not full month ()
if (i==3) {
for (j in 23:31) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end march for
} # end march if
as_date(16883)
when <- as_date("2017-11-06")
when <- as_numeric(as_date("2017-11-06"))
when <- c(as_date("2016-03-23"), as_date("2016-11-06"))
when <- vector()
when <- c(when, as_date("2016-03-23"), as_date("2016-11-06"))
# start is also 16883
as_date(16883)
# as_date(16883) # "2016-03-23" == 16883
as_date(16883) # "2016-11-26" == 17111
# as_date(16883) # "2016-03-23" == 16883
as_date(17111) # "2016-11-26" == 17111
when <- vector(16883:17111)  # initialize empty vector to hold dates
when <- c(16883:17111)  # initialize empty vector to hold dates
as_date(when)
when <- as_date(when)
when <- as_string( as_date(when) )
when <- string( as_date(when) )
when <- chr( as_date(when) )
when <- as.character( as_date(when) )
when <- c(16883:17111) %>%
as_date() %>%
as.character() # initialize empty vector to hold dates
when <- c(16883:17111) %>%
as_date() %>%
as.character() # initialize empty vector to hold dates
# as_date(16883) # "2016-03-23" == 16883
# as_date(17111) # "2016-11-26" == 17111
when <- c(16883:17111)
when <- c(16883:17111) %>%
as_date() %>%
as.character() # initialize empty vector to hold dates
start <- as.numeric(as_date("2016-03-23"))
when <- c(16883:17111) %>%  # create vector from 16883 to 17111
as_date() %>%             # convert to date
as.character() %>%        # convert to string
paste0("T12:00:00-0400")
when
when2=c("2013-05-06T12:00:00-0400",
"2013-05-06T12:00:00-0400")
when2=c("2013-05-06T12:00:00-0400","2013-05-06T12:00:00-0400")
when2
17111-16883
dates1 <- dates[1:7]
dates <- c(16883:17111) %>%  # create vector from 16883 to 17111
as_date() %>%             # convert to date
as.character() %>%        # convert to string
paste0("T12:00:00-0400")
dates1 <- dates[1:7]
devtools::install_github("AndreaCirilloAC/updateR")
updateR(admin_password = "11235813")
library(updateR)
updateR(admin_password = "11235813")
install.packages(as.vector(needed_packages))
install.packages(c("MASS", "survival"))
library(tidyverse)
library(tidyverse)
install.packages('tidyverse')
install.packages('openxlsx')
install.packages('lubridate')
install.packages('lattice')
install.packages('nutshell')
install.packages('ellipse')
install.packages('corrplot')
install.packages('tree')
install.packages('class')
install.packages('caret')
install.packages('rjava')
install.packages('haven')
install.packages('xlsx')
install.packages('rJava')
install.packages('xlsx')
install.packages('e1071')
install.packages('naivebayes')
install.packages('matrixStats')
install.packages('lpSolve')
install.packages('mice')
install.packages('psych')
install.packages('randomForest')
install.packages('rattle')
install.packages('zoo')
install.packages('widyr')
install.packages("tidytext")
install.packages("textclean")
install.packages("tm")
install.packages("topicmodels")
# set up API key -
# https://darksky.net/dev/account
# The easiest way to accomplish this is to set it in the '.Renviron' file in your home directory.
#install.packages("usethis")
usethis::edit_r_environ()
install.packages("usethis")
library(tidyverse)
library(openxlsx)
library(lubridate)
location <- "~/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Will-I-Be-Late-/data"
# source: Kaggle: https://www.kaggle.com/septa/on-time-performance
otp <- read.csv(paste(location,"otp.csv", sep="/"))
head(otp)
thorndale <- otp %>%
filter(origin = 'Thorndale')
thorndale <- otp %>%
filter(origin == 'Thorndale')
View(thorndale)
foxchase <- otp %>%
filter(origin == 'Fox-Chase')
foxchase <- otp %>%
filter(origin == 'FoxChase')
foxchase <- otp %>%
filter(origin == 'Foxchase')
foxchase <- otp %>%
filter(origin == 'Fox-chase')
View(otp)
foxchase <- otp %>%
filter(origin == 'Fox Chase')
summary(otp)
prop.table(summary(otp$status))
knitr::opts_chunk$set(echo = TRUE)
A <- runif(10,1,10)
# we'll need a standardize function later, so turn it into a function:
stndz <- function(A) {
return ( (A-mean(A)) / sd(A) )
}
# we'll need a standardize function later, so turn it into a function:
stndz <- function(A) {
return ( (A-mean(A)) / sd(A) )
}
A2 <- stndz(A)
# part 1
x <- c(1,1,0,0,0)
y <- c(0,0,0,1,1)
stndz(x)
stndz(y)
cos_d <- function(x,y) {
d <- (x %*% y) / ( sqrt(sum(x^2))*sqrt(sum(y^2)) )
return(d)
}
euc_d <- function(x,y) {
d <- sqrt( sum( (x-y)^2 ) )
return(d)
}
cor_d <- function(x,y) {
d <- ( stndz(x) %*% stndz(y) ) / ( length(x)-1 )
return(d)
}
# part 3
x <- c(0,1,2,4,5,3)
y <- c(5,6,7,9,10,8)
x %*% y
x^2
sum(x^2)
sqrt(sum(x^2))
sum(y^2)
sqrt(55) + sqrt(355)
sqrt(55+355)
130/(sqrt(55) + sqrt(355))
cos(x,y)
cos_d(,xy)
cos_d(x,y)
stations <- "Fox Chase"
latitudes <- c(39.954129, 39.992838)
longitudes <- c(-75.16682624816895, 75.763693)
# need weather from 2016-03-23 to 2016-11-06
# dates get converted to numbers in R:
start <- as.numeric( as_date("2016-03-23") )
end <- as.numeric( as_date("2016-11-06") )
dates <- c(16883:17111) %>%  # create vector from 16883 to 17111
as_date() %>%             # convert to date
as.character() %>%        # convert to string
paste0("T12:00:00-0400")
dates1 <- dates[1:7]
dates2 <- dates[8:50]
dates3 <- dates[51:100]
dates4 <- dates[101:150]
dates5 <- dates[151:200]
dates6 <- dates[201:229]
# load function to call the DarkSky API for our dates and locations
source("callAPI.R")
setwd("~/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Will-I-Be-Late-/data")
# load function to call the DarkSky API for our dates and locations
source("callAPI.R")
library(darksky)
library(tidyverse)
library(lubridate)
library(openxlsx)
# join all of the weather subsets together
weather0 <- read.csv("weather.csv", header=T)
View(weather0)
stations <- "Fox Chase"
stations <- c("Philadelphia","Thorndale")
latitudes <- c(39.954129, 39.992838)
longitudes <- c(-75.16682624816895, -75.763693)
# need weather from 2016-03-23 to 2016-11-06
# dates get converted to numbers in R:
start <- as.numeric( as_date("2016-03-23") )
end <- as.numeric( as_date("2016-11-06") )
dates <- c(16883:17111) %>%  # create vector from 16883 to 17111
as_date() %>%             # convert to date
as.character() %>%        # convert to string
paste0("T12:00:00-0400")
dates1 <- dates[1:7]
dates2 <- dates[8:50]
dates3 <- dates[51:100]
dates4 <- dates[101:150]
dates5 <- dates[151:200]
dates6 <- dates[201:229]
# load function to call the DarkSky API for our dates and locations
source("callAPI.R")
setwd("~/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Will-I-Be-Late-")
# load function to call the DarkSky API for our dates and locations
source("callAPI.R")
location <- "~/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Will-I-Be-Late-/data"
# join all of the weather subsets together
weather0 <- read.csv(paste(location, "weather.csv", sep="/"), header=T)
# join all of the weather subsets together
weather0 <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
# load function to call the DarkSky API for our dates and locations
source("callAPI.R")
weather1 <- callAPI(stations, latitudes, longitudes, dates1)
weather2 <- callAPI(stations, latitudes, longitudes, dates2)
weather3 <- callAPI(stations, latitudes, longitudes, dates3)
weather4 <- callAPI(stations, latitudes, longitudes, dates4)
weather5 <- callAPI(stations, latitudes, longitudes, dates5)
weather6 <- callAPI(stations, latitudes, longitudes, dates6)
weather <- union_all(weather1, weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
# convert relevant columns to factors
weather$station <- factor(weather$station)
weather$time <- factor(weather$time)
weather$summary <- factor(weather$summary)
weather$icon <- factor(weather$icon)
weather$precipType <- factor(weather$precipType)
# save to file
write.csv(weather, "weather.csv", col.names = T, row.names=F)
# save to file
write.csv(weather, "weather.csv", col.names = T, row.names=F)
# join all of the weather subsets together
weather0 <- read.csv(paste(location, "weather.csv", sep="/"), header=T)
stations <- "Fox Chase"
latitudes <- 40.075953
longitudes <- -75.083592
weather1 <- callAPI(stations, latitudes, longitudes, dates1)
weather2 <- callAPI(stations, latitudes, longitudes, dates2)
weather3 <- callAPI(stations, latitudes, longitudes, dates3)
weather4 <- callAPI(stations, latitudes, longitudes, dates4)
weather5 <- callAPI(stations, latitudes, longitudes, dates5)
weather6 <- callAPI(stations, latitudes, longitudes, dates6)
weather <- union_all(weather0, weather1) %>%
union_all(weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
weather <- union_all(weather0, weather1) %>%
union_all(weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
weather <- union_all(weather1, weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
# convert relevant columns to factors
weather$station <- factor(weather$station)
weather$time <- factor(weather$time)
weather$summary <- factor(weather$summary)
weather$icon <- factor(weather$icon)
weather$precipType <- factor(weather$precipType)
weather <- union_all(weather0, weather)
weather0$station <- factor(weather$station)
weather0$station <- factor(weather0$station)
weather0$time <- factor(weather0$time)
weather0$summary <- factor(weather0$summary)
weather0$icon <- factor(weather0$icon)
weather0$precipType <- factor(weather0$precipType)
weather0$time <- as_date(weather0$time)
weather$time <- as_date(weather$time)
weather0 <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
weather1 <- callAPI(stations, latitudes, longitudes, dates1)
weather2 <- callAPI(stations, latitudes, longitudes, dates2)
weather3 <- callAPI(stations, latitudes, longitudes, dates3)
weather4 <- callAPI(stations, latitudes, longitudes, dates4)
weather5 <- callAPI(stations, latitudes, longitudes, dates5)
weather6 <- callAPI(stations, latitudes, longitudes, dates6)
# read in previously scraped data
weather0 <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
# convert to appropriate formats
weather0$station <- factor(weather0$station)
weather0$time <- as_date(weather0$time)
weather0$summary <- factor(weather0$summary)
weather0$icon <- factor(weather0$icon)
weather0$precipType <- factor(weather0$precipType)
# combine scraped data
weather <- union_all(weather1, weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
# convert to appropriate formats
weather$station <- factor(weather$station)
weather$time <- as_date(weather$time)
weather$summary <- factor(weather$summary)
weather$icon <- factor(weather$icon)
weather$precipType <- factor(weather$precipType)
# combine old and new
weather <- union_all(weather0, weather)
# read in previously scraped data
weather0 <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
# combine scraped data
weather <- union_all(weather1, weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
# combine old and new
weather <- union_all(weather0, weather)
# read in previously scraped data
weather0 <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
# combine scraped data
weather <- union_all(weather1, weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
# check to make sure we have same columns
names(weather0)
names(weather)
# check to make sure we have same columns
names(weather0) == names(weather)
str(weather0)
str(weather)
# check types to make sure we have same types to combine
str(weather0)
str(weather)
# convert variables to combine
weather0$time <- as.POSIXct(weather0$time)
# check types to make sure we have same types to combine
str(weather0)
str(weather)
weather$summary <- as.factor(weather$summary)
weather$icon <- as.factor(weather$icon)
weather$precipType <- as.factor(weather$precipType
)
# check types to make sure we have same types to combine
str(weather0)
str(weather)
# convert variables to combine
weather0$time <- as.POSIXct(weather0$time)
weather$summary <- as.factor(weather$summary)
weather$icon <- as.factor(weather$icon)
weather$precipType <- as.factor(weather$precipType
)
# combine old and new
weather <- union_all(weather0, weather)
# save to file
write.csv(weather, paste(location, "weather.csv", sep="/"), col.names = T, row.names=F)
# source: DarkSky API - see "getWeather.R"
weather <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
# source: DarkSky API - see "getWeather.R"
weather <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
weather0 <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
a
# combine scraped data
weather <- union_all(weather1, weather2) %>%
union_all(weather3) %>%
union_all(weather4) %>%
union_all(weather5) %>%
union_all(weather6)
# check to make sure we have same columns
names(weather0) == names(weather)
# check types to make sure we have same types to combine
str(weather0)
str(weather)
# convert variables to combine
weather0$time <- as.POSIXct(weather0$time)
weather$summary <- as.factor(weather$summary)
weather$icon <- as.factor(weather$icon)
weather$precipType <- as.factor(weather$precipType
)
# combine old and new
weather <- union_all(weather0, weather)
# save to file
write.csv(weather, paste(location, "weather.csv", sep="/"), col.names = T, row.names=F)
# source: DarkSky API - see "getWeather.R"
weather <- read.csv(paste(location, "weather.old.csv", sep="/"), header=T)
# source: DarkSky API - see "getWeather.R"
weather <- read.csv(paste(location, "weather.csv", sep="/"), header=T)
# convert relevant columns to factors
weather$station <- factor(weather$station)
weather$time <- as_date(weather$time)
weather$summary <- factor(weather$summary)
weather$icon <- factor(weather$icon)
weather$precipType <- factor(weather$precipType)
summary(weather)
str(weather)
#weather$time <- as_date(weather$time)
weather$time <- as.POSIXct(weather$time)
summary(weather)
str(weather)
head(weather)
weather[25:30,]
weather[105:120,]
View(weather)
# source: DarkSky API - see "getWeather.R"
weather <- read.csv(paste(location, "weather.csv", sep="/"), header=T)
#weather$time <- as_date(weather$time)
weather$time <- as.POSIXct(weather$time)
str(weather)
summary(weather)
weather[105:120,]
