data <- read.csv(paste(location,"FlightDelays.csv", sep="/"))
data[1:5,]
x <- data[,c('schedtime','carrier','dest','origin','weather','dayweek')]
x$schedtime <- factor(floor(x$schedtime/100))
x$weather <- factor(x$weather)
x$dayweek <- factor(x$dayweek)
x[1:5,]
y<- data$delay
barplot(table(y))
## determining test and evaluation data sets
n=nrow(x)
n
n1=floor(n*(0.6))
n1
n2=n-n1
n2
train=sample(1:n,n1)
x.train <- x[train,]
y.train <- y[train]
x.test <- x[-train,]
y.test <- y[-train]
nb=naiveBayes(x.train, y.train)
nb$apriori # please verify ...
nb$tables # please verify ...
table(y.test,y.pred) # confusion matrix
sum(y.test==y.pred)/n2 # prediction accuracy
y.pred=predict(nb, newdata=x.test)
sum(y.test==y.pred)/n2 # prediction accuracy
# Example: Non-linear SVM
?svm # read on parameters: type, cost, kernel, radial basis, gamma
model <- svm(Species ~ ., data = iris)
print(model)
summary(model)
# test with train data
pred <- predict(model, newdata = iris)
n=100
theta = runif(n, 0, 2*pi)
one = rnorm(n, 1, 0.1)
two = rnorm(n, 2, 0.1)
one.x = cbind(one*cos(theta), one*sin(theta))
two.x = cbind(two*cos(theta), two*sin(theta))
x = rbind(one.x, two.x)
y = factor(cbind(rep(1, n), rep(2, n)))
plot(x, col=y)
model = svm(x, y)
table(y, fitted(model))
grid.x = expand.grid(seq(-2,2,0.1),seq(-2,2,0.1))
pred.x = predict(model, grid.x)
angles = c(0, 90)
for ( n in 1:nrow(grid.x)) {
x1=grid.x[n,1]
x2=grid.x[n,2]
xy=pred.x[n]
rect(x1-0.05, x2-0.05, x1+0.05, x2+0.05, col=xy, border = "transparent", density=10, angle=angles[xy])
}
# Random Forest
library(randomForest)
rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
rf.p <- classCenter(iris[,-5], iris[,5], rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(rf.p[,3], rf.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
print(rf)
# Random Forest
library(randomForest)
rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
rf.p <- classCenter(iris[,-5], iris[,5], rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(rf.p[,3], rf.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
print(rf)
# Random Forest
library(randomForest)
rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
rf.p <- classCenter(iris[,-5], iris[,5], rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(rf.p[,3], rf.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
print(rf)
# Random Forest
library(randomForest)
rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
rf.p <- classCenter(iris[,-5], iris[,5], rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(rf.p[,3], rf.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
print(rf)
devtools::install.packages("darksky")
devtools::install.packages("darksky")
install.packages("darksky")
library(darksky)
library(tidyverse)
.Renviron
install.packages("usethis")
usethis::edit_r_environ()
library(darksky)
library(tidyverse)
# get forecast for
get_forecast_for(43.2672, -70.8617, "2013-05-06T12:00:00-0400", add_headers=TRUE)
# how many API calls?
print(sprintf("You have used %s API calls.", then$`x-forecast-api-calls`))
# getting data for more than one location
more_than_one <- data.frame(loc=c("Maine", "Seattle"),
lat=c(43.2672, 47.6097),
lon=c(70.8617, 122.3331),
when=c("2013-05-06T12:00:00-0400",
"2013-05-06T12:00:00-0400"),
stringsAsFactors=FALSE)
# how many API calls?
print(sprintf("You have used %s API calls.", more_than_one$`x-forecast-api-calls`))
# how many API calls?
print(sprintf("You have used %s API calls.", more_than_one$`x-forecast-api-calls`))
View(more_than_one)
library(darksky)
library(tidyverse)
location <- "/Users/mithras/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Project/Data"
#-- Data cleaning ---------------------------------------------------------------------------------
otp <- read.csv(paste(location,"otp.csv", sep="/"))
trainView <- read.csv(paste(location,"trainView.csv", sep="/"))
# SEPTA - On Time Performance Data. 2016-03-23 to 2016-11-06
summary(otp)
head(otp)
# SEPTA - GPS Train information. 2016-03-23 to 2016-11-06
summary(trainView)
library(lubridate)
# need weather from 2016-03-23 to 2016-11-06
start <- as_date("2016-03-23")
start
str(start)
start.day
day(start)
month(start)
View(trainView)
# get forecast for stations:
# Philadelphia:
# Thornedale:
#
test <- get_forecast_for(43.2672, -70.8617, "2013-05-06T12:00:00-0400", add_headers=TRUE)
test
View(test)
# how many API calls?
print(sprintf("You have used %s API calls.", test$`x-forecast-api-calls`))
# get forecast for stations:
# Philadelphia:
# Thornedale:
#
test <- get_forecast_for(43.2672, -70.8617, "2013-05-06", add_headers=TRUE)
View(test)
test$hourly
testdate<- as_date("2013-05-06T12:00:00-0400")
testdate<- as_datetime("2013-05-06T12:00:00-0400")
month(start)
i = 3
j=23
as_date(c(i,"-",j,"-2016"))
c(i,"-",j,"-2016")
paste0(i,"-",j,"-2016")
for (i in month(start): month(end)) {
month <- i
# march separate b/c not full month ()
if (i=3) {
for (j in 23:31) {
day <- j
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end march for
} # end march if
# if april, june, september, 30 days
else if ( (i=4) | (i=6) | (i=9) | (i=11) ) {
for (j in 1:30) {
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end 30 for
} # end 30 if
# if may, july, august, october, 31 days
else if ( (i=5) | (i=8) | (i=10) ) {
for (j in 1:31) {
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end 31 for
} # end 31 if
# november separate b/c not full month
else if (i=11){
for (j in 1:6) {
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end november for
} # end november if
else {break}   # error?
} # end for
for (i in month(start): month(end)) {
month <- i
# march separate b/c not full month ()
if (i==3) {
for (j in 23:31) {
day <- j
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end march for
} # end march if
# if april, june, september, 30 days
else if ( (i==4) | (i==6) | (i==9) | (i==11) ) {
for (j in 1:30) {
day <- j
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end 30 for
} # end 30 if
# if may, july, august, october, 31 days
else if ( (i==5) | (i==8) | (i==10) ) {
for (j in 1:31) {
day <- j
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end 31 for
} # end 31 if
# november separate b/c not full month
else if (i==11){
for (j in 1:6) {
day <- j
when <- c(when, paste0(i,"-",j,"-2016")) # for debug
} # end november for
} # end november if
else {
break # error?
} # end else
} # end for
for (i in month(start): month(end)) {
month <- i
# march separate b/c not full month ()
if (i==3) {
for (j in 23:31) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end march for
} # end march if
# if april, june, september, 30 days
else if ( (i==4) | (i==6) | (i==9) | (i==11) ) {
for (j in 1:30) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end 30 for
} # end 30 if
# if may, july, august, october, 31 days
else if ( (i==5) | (i==8) | (i==10) ) {
for (j in 1:31) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end 31 for
} # end 31 if
# november separate b/c not full month
else if (i==11){
for (j in 1:6) {
day <- j
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
} # end november for
} # end november if
else {
break # error?
} # end else
} # end for
when <- NULL  # initialize empty
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
when <- c(when, as_date(paste0(i,"-",j,"-2016")) ) # for debug
date <- as_date(paste0(i,"-",j,"-2016"))
date
date <- paste0(i,"-",j,"-2016")
date <- paste0("2016-",i,"-",j,)
date <- paste0("2016-",i,"-",j)
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
when <- as_date()  # initialize empty
when <- as_date(NULL)  # initialize empty
when <- vector  # initialize empty
when <- vector()  # initialize empty
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
when <- vector()  # initialize empty vector to hold dates
# loop through months; inner loop through days
for (i in month(start): month(end)) {
month <- i
# march separate b/c not full month ()
if (i==3) {
for (j in 23:31) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end march for
} # end march if
# if april, june, september, 30 days
else if ( (i==4) | (i==6) | (i==9) | (i==11) ) {
for (j in 1:30) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end 30 for
} # end 30 if
# if may, july, august, october, 31 days
else if ( (i==5) | (i==8) | (i==10) ) {
for (j in 1:31) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end 31 for
} # end 31 if
# november separate b/c not full month
else if (i==11){
for (j in 1:6) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end november for
} # end november if
else {
break # error?
} # end else
} # end for
# march separate b/c not full month ()
if (i==3) {
for (j in 23:31) {
day <- j
date <- as_date(paste0("2016-",i,"-",j))
when <- c(when, date) # for debug
} # end march for
} # end march if
as_date(16883)
when <- as_date("2017-11-06")
when <- as_numeric(as_date("2017-11-06"))
when <- c(as_date("2016-03-23"), as_date("2016-11-06"))
when <- vector()
when <- c(when, as_date("2016-03-23"), as_date("2016-11-06"))
# start is also 16883
as_date(16883)
# as_date(16883) # "2016-03-23" == 16883
as_date(16883) # "2016-11-26" == 17111
# as_date(16883) # "2016-03-23" == 16883
as_date(17111) # "2016-11-26" == 17111
when <- vector(16883:17111)  # initialize empty vector to hold dates
when <- c(16883:17111)  # initialize empty vector to hold dates
as_date(when)
when <- as_date(when)
when <- as_string( as_date(when) )
when <- string( as_date(when) )
when <- chr( as_date(when) )
when <- as.character( as_date(when) )
when <- c(16883:17111) %>%
as_date() %>%
as.character() # initialize empty vector to hold dates
when <- c(16883:17111) %>%
as_date() %>%
as.character() # initialize empty vector to hold dates
# as_date(16883) # "2016-03-23" == 16883
# as_date(17111) # "2016-11-26" == 17111
when <- c(16883:17111)
when <- c(16883:17111) %>%
as_date() %>%
as.character() # initialize empty vector to hold dates
start <- as.numeric(as_date("2016-03-23"))
when <- c(16883:17111) %>%  # create vector from 16883 to 17111
as_date() %>%             # convert to date
as.character() %>%        # convert to string
paste0("T12:00:00-0400")
when
when2=c("2013-05-06T12:00:00-0400",
"2013-05-06T12:00:00-0400")
when2=c("2013-05-06T12:00:00-0400","2013-05-06T12:00:00-0400")
when2
17111-16883
dates1 <- dates[1:7]
dates <- c(16883:17111) %>%  # create vector from 16883 to 17111
as_date() %>%             # convert to date
as.character() %>%        # convert to string
paste0("T12:00:00-0400")
dates1 <- dates[1:7]
devtools::install_github("AndreaCirilloAC/updateR")
updateR(admin_password = "11235813")
library(updateR)
updateR(admin_password = "11235813")
install.packages(as.vector(needed_packages))
install.packages(c("MASS", "survival"))
library(tidyverse)
library(tidyverse)
install.packages('tidyverse')
install.packages('openxlsx')
install.packages('lubridate')
install.packages('lattice')
install.packages('nutshell')
install.packages('ellipse')
install.packages('corrplot')
install.packages('tree')
install.packages('class')
install.packages('caret')
install.packages('rjava')
install.packages('haven')
install.packages('xlsx')
install.packages('rJava')
install.packages('xlsx')
install.packages('e1071')
install.packages('naivebayes')
install.packages('matrixStats')
install.packages('lpSolve')
install.packages('mice')
install.packages('psych')
install.packages('randomForest')
install.packages('rattle')
install.packages('zoo')
install.packages('widyr')
install.packages("tidytext")
install.packages("textclean")
install.packages("tm")
install.packages("topicmodels")
# set up API key -
# https://darksky.net/dev/account
# The easiest way to accomplish this is to set it in the '.Renviron' file in your home directory.
#install.packages("usethis")
usethis::edit_r_environ()
install.packages("usethis")
library(tidyverse)
library(openxlsx)
library(lubridate)
location <- "~/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Will-I-Be-Late-/data"
# source: Kaggle: https://www.kaggle.com/septa/on-time-performance
otp <- read.csv(paste(location,"otp.csv", sep="/"))
head(otp)
thorndale <- otp %>%
filter(origin = 'Thorndale')
thorndale <- otp %>%
filter(origin == 'Thorndale')
View(thorndale)
foxchase <- otp %>%
filter(origin == 'Fox-Chase')
foxchase <- otp %>%
filter(origin == 'FoxChase')
foxchase <- otp %>%
filter(origin == 'Foxchase')
foxchase <- otp %>%
filter(origin == 'Fox-chase')
View(otp)
foxchase <- otp %>%
filter(origin == 'Fox Chase')
summary(otp)
prop.table(summary(otp$status))
knitr::opts_chunk$set(echo = TRUE)
A <- runif(10,1,10)
# we'll need a standardize function later, so turn it into a function:
stndz <- function(A) {
return ( (A-mean(A)) / sd(A) )
}
# we'll need a standardize function later, so turn it into a function:
stndz <- function(A) {
return ( (A-mean(A)) / sd(A) )
}
A2 <- stndz(A)
# part 1
x <- c(1,1,0,0,0)
y <- c(0,0,0,1,1)
stndz(x)
stndz(y)
cos_d <- function(x,y) {
d <- (x %*% y) / ( sqrt(sum(x^2))*sqrt(sum(y^2)) )
return(d)
}
euc_d <- function(x,y) {
d <- sqrt( sum( (x-y)^2 ) )
return(d)
}
cor_d <- function(x,y) {
d <- ( stndz(x) %*% stndz(y) ) / ( length(x)-1 )
return(d)
}
# part 3
x <- c(0,1,2,4,5,3)
y <- c(5,6,7,9,10,8)
x %*% y
x^2
sum(x^2)
sqrt(sum(x^2))
sum(y^2)
sqrt(55) + sqrt(355)
sqrt(55+355)
130/(sqrt(55) + sqrt(355))
cos(x,y)
cos_d(,xy)
cos_d(x,y)
~/.rs.environ
~/.renviron
~/.Renviron
~//.Renviron
~\.Renviron
# install.packages("e1071")
# install.packages("kernlab")
# install.packages("pROC")
# install.packages("microbenchmark")
# install.packages("doParallel")
library(tidyverse)
library(skimr)
library(doParallel)
library(caret)
library(microbenchmark)
#library(e1071)
#library(kernlab) # ksvm
library(pROC)
setwd("~/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Will-I-Be-Late-")
location <- "~/Documents/_SCHOOL/_Drexel/STAT 642 - Data Mining/Assignments/Will-I-Be-Late-/data"
#--- Split Train/Test -----------------------------------------------------------------------------
# import saved data
model_data <- readRDS(paste(location,"model_data.rds", sep="/"))
# svm needs the class labels to be a labelled factor
model_data$delay <- factor(model_data$delay, labels = c("on.time","late"), levels = c(1, 2))
# Split into training/testing set
set.seed(100)
index <- sample(nrow(model_data), 0.7*nrow(model_data), replace=F)
model_train <- model_data[ index,]
model_test  <- model_data[-index,]
summary(model_test)
